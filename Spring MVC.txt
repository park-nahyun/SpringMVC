■■■ Spring MVC ■■■

1. 웹 개발을 위한 MVC 패턴이 적용된 Spring Framework.
   Spring 에서는 DispatcherServlet 클래스가 컨트롤러 역할을 수행하게 된다.

2. Spring MVC 의 주요 구성요소
   - DispatcherServlet
   - HandlerMapping
   - Controller : 사용자 정의 Controller. 액션 처리. 우리가 작성.
   - ModelAndView
   - ViewResolver
   - View : 결과 출력. 우리가 작성.
   - web.xml : DispatcherServlet 서블릿 객체 등록. 우리가 작성.
   - dispatcher-servlet.xml : Controller 객체 등록. 우리가 작성.

3. Spring MVC 실행 흐름
   - 사용자 요청 → DispatcherServlet
   - DispatcherServlet → HandlerMapping 에 주소 분석 요청.
   - DispatcherServlet → 특정 Controller 객체 호출 및 결과 수신.
                         결과는 ModelAndView 객체.
     ※ ModelAndView 객체
       : View 객체 정보와 결과값이 들어있는 객체.

   - DispatcherServlet → ViewResolver 에 View 객체 분석 요청.
   - DispatcherServlet → 특정 View 객체에 Model 객체를 넘겨주고 결과 출력.

4. Spring MVC 
   - Controller
     액션 처리를 담당하는 Controller 클래스 작성.
     Annotation 을 사용하지 않으면 Controller 인터페이스를 구현하여 작성.
   - View
     결과 출력용 JSP 페이지 작성.
   - web.xml
     서블릿 주소와 DispatcherServler 클래스 등록.
   - dispatcher-servlet.xml
     우리가 작성한 Controller 객체 등록.
     URL 매핑 주소 등록.

※ Spring 이 스트럿츠를 비롯하여 다양한 웹 프레임워크와 비교적 연동이 잘 되는 편이긴 하지만
  서로 다른 두 프레임워크를 연동하기 위해서는 설정의 중복 등 개발 과정에서 불편함이 존재할 수 밖에 없다.
  따라서 Spring 이 자체적으로 제공하는 MVC 프레임워크를 사용하게 되면 
  Spring 이 제공하는 AOP, 트랙잭션 처리, IoC/DI 등의 기능을 그대로 사용하면서
  MVC 패턴에 기반하여 웹 어플리케이션을 개발할 수 있다.
  또한, 다른 프레임워크와 Spring 을 연동하기 위해 설정을 중복해서 적용해야 한다던지 하는 
  개발 과정에서 나타나는 불편을 해소할 수 있게 된다.


---------------------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 01 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc01

○ 톰캣 서버 등록 및 포트(port) 설정 
  : port 8090 / URIEncoding="UTF-8"

○ 기타 환경 설정 
  : spring_standard.epf(폰트, 줄번호, 편집포맷, 인코딩방식, 템플릿 등)

○ Spring MVC 환경 설정을 위한 라이브러리 등록
  : WebContent > WEB-INF > lib 경로에 등록
  - 경로 1 → /Users/harim/spring-framework-3.0.2-with-docs/dist
    · 파일 1 → org.springframework.aop-3.0.2.RELEASE.jar
    · 파일 2 → org.springframework.asm-3.0.2.RELEASE.jar
    · 파일 3 → org.springframework.beans-3.0.2.RELEASE.jar
    · 파일 4 → org.springframework.context-3.0.2.RELEASE.jar
    · 파일 5 → org.springframework.core-3.0.2.RELEASE.jar
    · 파일 6 → org.springframework.expression-3.0.2.RELEASE.jar
    · 파일 7 → org.springframework.jdbc-3.0.2.RELEASE.jar
    · 파일 8 → org.springframework.transaction-3.0.2.RELEASE.jar
    · 파일 9 → org.springframework.web.servlet-3.0.2.RELEASE.jar
    · 파일 10 → org.springframework.web-3.0.2.RELEASE.jar
  - 경로 2 → /Users/harim/spring-framework-3.0.2-dependencies/org.apache.commons/com.springsource.org.apache.commons.logging/1.1.1
    · 파일 11 → com.springsource.org.apache.commons.logging-1.1.1.jar
  - 경로 3 → /Users/harim/WebDownloads/09_Ojdbc6 또는 
             오라클 설치 경로(C:\oraclexe\app\oracle\product\11.2.0\server\jdbc\lib
    · 파일 12 → ojdbc6.jar
  - 경로 4 → /Users/harim/WebDownloads/jakarta-taglibs-standard-1.1.2/lib(JSTL 설치경로)
    · 파일 13 → jstl.jar
    · 파일 14 → standard.jar

○ 물리적 파일 구성
  - com.test.mvc.HelloController.java
  - WebContent > WEB-INF > views > Hello.jsp
  - dispatcher-servlet.xml
  - web.xml

○ 사용자의 최초 요청 주소
http://localhost:8090/mvc01/hello.action/


※ 우리가 작성한 mvc01 프로젝트의 실행 및 처리 과정

   ① 외부 요청 
      http://localhost:8090/mvc01/hello.action/

      → web.xml 관여
         ( → Front Controller 등록 → DispathcerServlet 등록)

   ② DispatcherServlet 요청 접수

      → web.xml → DispatcherServlet 등록
                    URL 패턴 등록
      → dispatcher-servlet.xml 관여
      → 사용자의 요청 분석 → 특정 컨트롤러 지정

   ③ 해당 컨트롤러의 특정 메소드 호출(액션 처리, ModelAndView 객체 리턴)
      → 사용자의 요청에 맞는 액션 처리

      → 결과 데이터가 들어있는 모델 객체 준비

      → 뷰 정보 (JSP 페이지 정보) 반환

         ※ JSP 페이지 정보 
            - 여기서는 객체가 아닌 경로가 포함된 View 페이지 이름

   ④ 뷰 페이지에서 최종 웹 페이지를 작성
      
      → JSP 페이지 내에서 EL 이나 JSTL 등의 표기 사용 가능

   ⑤ 응답 완료


---------------------------------------------------------------------------------------------------------
■■■ zj ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc02

○ 톰캣 서버 등록 및 포트(port) 설정 
  : port 8090 / URIEncoding="UTF-8"

○ 기본 환경 구성 및 라이브러리 설정
  : mvc00(우리가 임의로 만들어둔 샘플)로 부터 src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
  : 데이터 송수신 관련 실습 (Spring MVC 버전)

○ 물리적 파일 구성
  - SendController.java     → 컨트롤러 객체
  - Send.jsp	            → 뷰 객체
  
  - ReceiveController.java  → 컨트롤러 객체
  - Receive.jsp             → 뷰 객체

  - dispatcher-servlet.xml  → 컨트롤러 객체 등록 / URL 매핑 주소 등록

  - web.xml                 → DispatcherServlet 객체 등록 / URL 매핑 주소 등록 

○ 사용자의 최초 요청 주소
http://localhost:8090/mvc02/send.do


---------------------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 03 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc03

○ 기본 환경 구성 및 라이브러리 설정
  : mvc00(우리가 임의로 만들어둔 샘플)로 부터 src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
  : 데이터 송수신 관련 실습 (Spring MVC 버전)
    JDBC 모듈 추가 활용
    SimpleDriverDataSource 클래스 활용

○ 기능 구현
  : 사용자로부터 이름, 전화번호 정보를 입력받아 데이터베이스에 저장.
    이름, 전화번호 항목을 데이터베이스로부터 읽어 화면에 출력.

○ 기본 레이아웃(페이지 화면 구성)

   이름 [             ]    → <input type="text">
   전화 [             ]    → <input type="text">
   <회원 추가>
  
   전체 인원 수 : 2명      → <p>...</p>
   --------------------    → <table>...</table>
   번호  이름  전화번호
    1    박..  0...
    2    이..  0...
   --------------------

○ 물리적 파일 구성
  - mvc03_scott.sql             → 데이터베이스 관련 객체 구성 및 실습 데이터 준비.

  - MemberDTO.java              → 사용자 정의 자료형 클래스. (DTO 활용)

  - IMemberDAO.java             → 인터페이스
  - MemberDAO.java              → 데이터베이스 액션 처리 클래스.
                                   Connection 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)

  - MemberListController.java   → 사용자 정의 컨트롤러 클래스.
                                   리스트 출력 액션.
                                   DAO 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)
  
  - MemberList.jsp              → 회원 명단 출력용 뷰.
 
  - MemberInsertController.java → 사용자 정의 컨트롤러 클래스.
                                   회원 정보 추가 액션.
                                   DAO 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)

  - dispatcher-servlet.xml      → 컨트롤러 객체 등록
                                   URL 매핑 주소 등록
                                   SimpleDriverDataSource 객체 등록.
                                   의존 객체 주입 설정.
                                   DAO 객체 등록.

  - web.xml                     → DispatcherServlet 객체 등록 / URL 매핑 주소 등록 

○ 사용자의 최초 요청 주소
http://localhost:8090/mvc02/memberlist.action

---------------------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 04 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc04

○ 기본 환경 구성 및 라이브러리 설정
  : mvc00(우리가 임의로 만들어둔 샘플)로 부터 src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
  : 데이터 송수신 관련 실습 (Spring MVC 버전)
    JDBC 모듈 추가 활용
    SimpleDriverDataSource 클래스 활용

○ 기능 구현
  - 직원 정보 출력, 입력, 삭제, 수정 기능 구현.
  - 지역 정보 출력, 입력, 삭제, 수정 기능 구현.
  - 부서 정보 출력, 입력, 삭제, 수정 기능 구현.
  - 직위 정보 출력, 입력, 삭제, 수정 기능 구현.
  - 로그인 / 로그아웃 기능 구현
    → 관리자 및 일반 직원 로그인 구분
  ==> Spring MVC, JSP/Servlet, Oracle, HTML/CSS/Javascript, AJAX, jQuery, EL, JSTL 표현 등 사용

○ 사전 작업 → 테이블 및 시퀀스, 주요 쿼리문 구성
  - employee 직원
  - region 지역
  - department 부서
  - position 직위
  - 샘플 데이터 입력


○ 물리적 파일 구성
  #00. mvc03_scott.sql          → 데이터베이스 관련 객체 구성 및 실습 데이터 준비.
  
  #01. Employee.java		→ DTO 개념. 직원 정보 자료형 클래스.
  #02. Department.java		→ DTO 개념. 부서 정보 자료형 클래스.
  #03. Region.java		→ DTO 개념. 지역 정보 자료형 클래스.
  #04. Position.java 		→ DTO 개념. 직위 정보 자료형 클래스.

  #05. IEmployeeDAO.java	→ 인터페이스.
  #06. IDepartmentDAO.java	→ 인터페이스.
  #07. IRegionDAO.java		→ 인터페이스.
  #08. IPositionDAO.java	→ 인터페이스.

  #09. EmployeeDAO.java		→ 데이터베이스 액션 처리 클래스.
				  직원 정보 입력 출력 수정 삭제.
				  Connection 객체에 대한 의존성 주입 준비.
  #10. DepartmentDAO.java	→ 데이터베이스 액션 처리 클래스.
				  직원 정보 입력 출력 수정 삭제.
				  Connection 객체에 대한 의존성 주입 준비.
  #11. RegionDAO.java		→ 데이터베이스 액션 처리 클래스.
				  직원 정보 입력 출력 수정 삭제.
				  Connection 객체에 대한 의존성 주입 준비.
  #12. PositionDAO.java		→ 데이터베이스 액션 처리 클래스.
				  직원 정보 입력 출력 수정 삭제.
				  Connection 객체에 대한 의존성 주입 준비.

  #13. EmployeeMenu.jsp		→ 메인 메뉴 뷰 페이지.
				  로그아웃 버튼.
  #13-1. menuStyle.css		→ 메뉴 스타일 구성.
  
  #14. EmployeeList.jsp		→ 직원 리스트 출력 페이지.
  #14-1. main.css		→ 메인 스타일 구성.

  #15. EmployeeListController.java 
       (employeelist.action)

  #16. web.xml			→ DispatcherServlet 객체 등록
				  URL 매핑 주소 등록

  #17. dispatcher-servlet.xml	→ 컨트롤러 객체 등록
			          URL 매핑 주소 등록
				  SimpleDriverDataSource 객체 등록
				  의존 객체 주입 설정
				  DAO 객체 등록

  #18. EmployeeInsertForm.jsp	→ 직원 데이터 입력 폼 페이지.
				  AJAX, jQuery 기능 포함.

  #19. EmployeeInsertFormController.java 
       (employeeinsertform.action)

       직원 추가 > 폼의 데이터 체크 > employeeinsert.action 

  #20. AjaxController.java 
       (employeeinsert.action)

  #21. Ajax.jsp		    	→ AJAX 객체 구성 페이지.

  #22. EmployeeInsertController.java
       (employeeinsert.action)


  #23. EmployeeUpdateForm.jsp	→ 직원 데이터 수정 폼 페이지.
				  AJAX, jQuery 기능 포함.


  #24. EmployeeUpdateFormController.java  
       (employeeupdateform.action)

  #25. EmployeeUpdateController.java  
       (employeeupdate.action)

  #26. EmployeeDeleteController.java  
       (employeedelete.action)

  #27. LoginForm.jsp		→ 관리자, 일반 직원 로그인 폼 페이지.
  
  
  #28. LoginFormController.java

  
  #29. LoginController.java

  #30. LogoutController.java

  #31. EmpList.jsp		→ 일반 직원 전용 리스트 출력 페이지.
				  (입력, 수정, 삭제 기능 없음)

  #32. EmpListController.java











  #17. DepartmentList.jsp	→ 부서 리스트 출력 페이지.

  #18. DepartmentInsertForm.jsp → 부서 데이터 입력 폼 페이지.

  #19. DepartmentUpdateForm.jsp → 부서 데이터 수정 폼 페이지.


  #20. RegionList.jsp		→ 지역 리스트 출력 페이지.

  #21. RegionInsertForm.jsp 	→ 지역 데이터 입력 폼 페이지.

  #22. RegionUpdateForm.jsp 	→ 지역 데이터 수정 폼 페이지.


  #23. PositionList.jsp		→ 직위 리스트 출력 페이지.

  #24. PositionInsertForm.jsp 	→ 직위 데이터 입력 폼 페이지.

  #25. PositionUpdateForm.jsp 	→ 직위 데이터 수정 폼 페이지.







  
  #37. DepartmentListController.java
  #38. DepartmentInsertFormController.java
  #39. DepartmentInsertController.java
  #40. DepartmentUpdateFormController.java
  #41. DepartmentUpdateController.java
  #42. DepartmentDeleteController.java

  #43. RegionListController.java
  #44. RegionInsertFormController.java
  #45. RegionInsertController.java
  #46. RegionUpdateFormController.java
  #47. RegionUpdateController.java
  #48. RegionDeleteController.java

  #49. PositionListController.java
  #50. PositionInsertFormController.java
  #51. PositionInsertController.java
  #52. PositionUpdateFormController.java
  #53. PositionUpdateController.java
  #54. PositionDeleteController.java
 




○ 사용자의 최초 요청 주소
http://localhost:8090/mvc04/employeelist.action




----------------------------------------------------------------------------------------------------------------


■■■ Spring MVC 프로젝트 실습 05 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc03

○ 기본 환경 구성 및 라이브러리 설정
  : mvc00(우리가 임의로 만들어둔 샘플)로 부터 src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
  : 데이터 송수신 관련 실습 (Spring MVC 버전)
    JDBC 모듈 추가 활용
    SimpleDriverDataSource 클래스 활용

○ 기능 구현
  : 사용자로부터 이름, 전화번호 정보를 입력받아 데이터베이스에 저장.
    이름, 전화번호 항목을 데이터베이스로부터 읽어 화면에 출력.

○ 기본 레이아웃(페이지 화면 구성)

   이름 [             ]    → <input type="text">
   전화 [             ]    → <input type="text">
   <회원 추가>
  
   전체 인원 수 : 2명      → <p>...</p>
   --------------------    → <table>...</table>
   번호  이름  전화번호
    1    박..  0...
    2    이..  0...
   --------------------

○ 물리적 파일 구성
  - mvc03_scott.sql             → 데이터베이스 관련 객체 구성 및 실습 데이터 준비.

  - MemberDTO.java              → 사용자 정의 자료형 클래스. (DTO 활용)

  - IMemberDAO.java             → 인터페이스
  - MemberDAO.java              → 데이터베이스 액션 처리 클래스.
                                   Connection 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)

  - MemberListController.java   → 사용자 정의 컨트롤러 클래스.
                                   리스트 출력 액션.
                                   DAO 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)
  
  - MemberList.jsp              → 회원 명단 출력용 뷰.
 
  - MemberInsertController.java → 사용자 정의 컨트롤러 클래스.
                                   회원 정보 추가 액션.
                                   DAO 객체에 대한 의존성 주입.
                                   (setter 메소드 추가)

  - dispatcher-servlet.xml      → 컨트롤러 객체 등록
                                   URL 매핑 주소 등록
                                   SimpleDriverDataSource 객체 등록.
                                   의존 객체 주입 설정.
                                   DAO 객체 등록.

  - web.xml                     → DispatcherServlet 객체 등록 / URL 매핑 주소 등록 

○ 사용자의 최초 요청 주소
http://localhost:8090/mvc02/memberlist.action

---------------------------------------------------------------------------------------------------------
■■■ Spring MVC 프로젝트 실습 04 ■■■

○ Perspective
  : JavaEE

○ 다이나믹 웹 프로젝트 생성
  : mvc05

○ 기본 환경 구성 및 라이브러리 설정
  : mvc00(우리가 임의로 만들어둔 샘플)로 부터 
    src, WebContent 디렉터리 복사 & 붙여넣기

○ 실습 성격
  : Annotation 표기법을 활용하여 샘플 기본 기능 구성.

○ 기능 구현
  - 페이지 요청 및 응답(mvc)

○ 물리적 파일 구성
  - web.xml		 	→ DispatcherServlet 객체 등록
			 	→ URL 매핑 주소 등록
		 		→ 필터 적용

  - dispatcher-servlet.xml	→ 『<context:component-scan>』 엘리먼트 등록
  
  - HelloController.java	→ 사용자 정의 컨트롤러(Controller)
  				→ 『@Controller』, 『@RequestMapping』
				   어노테이션 등록 활용

  - Hello.jsp			→ 사용자 정의 뷰(view) 페이지

  - hello.action		→ 서블릿 주소 요청용 빈 페이지


○ 사용자의 최초 요청 주소
http://localhost:8090/mvc05/hello.action 
----------------------------------------------------------------------------------------------------------------------
■ ■ ■ Spring MVC + Annotation + mybatis 프로젝트 실습 01 ■ ■ ■

○ 프로젝트
    : mybatisWork01


○ 관련 라이브러리 등록 / 환경 설정 / 기존 요청 및 응답 구조 테스트 


----------------------------------------------------------------------------------------------------------------------
■ ■ ■ Spring MVC + Annotation + mybatis 프로젝트 실습 02 ■ ■ ■

○ 프로젝트
    : mybatisWork02


○ 기능 구현
    : 이름, 전화번호를 데이터베이스에서 읽어내어 화면에 출력 
      이 과정에서 mybatis 활용


○ 사전 작업 → 데이터베이스 관련 객체 준비


○ 페이지 레이아웃 구성
    회원관리
	
    이름 [			]		→ <input type="text">
    전화 [			]		→ <input type="text">

    < 회 원 추 가 >			→ <input type="button">

    전체 인원 수 : 2명		→ <p>
    -----------------------		→ <table>
    번호    이름    전화
     1      전혜림  010...
     2      선혜연  010...


○ 물리적 파일 구성
    - mybatisWork02_scott.sql		→ 데이터베이스 관련 작업

    - MemberDTO.java				→ 데이터베이스 전송 객체 자료형 클래스(DTO)
    - IMemberDAO.java				→ 인터페이스
    - MemberDAO.xml				→ mybatis 환경 설정 파일 활용
    - MemberMain.java				→ mybatis 객체 활용(Controller)
    - MemberList.jsp				→ View 페이지 
    
    - dispatcher-servlet.xml			→ mybatis 객체 등록 및 활용 
    - web.xml						→ DispatcherServlet(프론트 컨트롤러) 등록 및 인코딩 설정(필터 활용)


○ 사용자 최초 요청 주소
http://localhost:8090/mybatisWork02/memberlist.aciton